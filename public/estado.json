const express = require('express');
const fs = require('fs');
const path = require('path');

const app = express();
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
  const estadoPath = path.join(__dirname, 'public/estado.json');
  let estado = {};

  try {
    estado = JSON.parse(fs.readFileSync(estadoPath, 'utf8'));
  } catch (err) {
    return res.send(`<section style="font-family:sans-serif; background:#1c1c1c; color:#ff4444; padding:30px; text-align:center;">
      <h2>❌ Error al cargar estado.json</h2>
      <p>${err.message}</p>
    </section>`);
  }

  const u = estado.usuario || {};
  const logs = estado.modlogs || [];
  const actualizado = new Date(estado.actualizado || Date.now());
  const ahora = new Date();
  const dias = Math.floor((ahora - actualizado) / (1000 * 60 * 60 * 24));
  const icono = dias <= 2 ? '🟢' : '🔴';
  const fondo = dias <= 2 ? '#112611' : '#260f0f';
  const colorTexto = dias <= 2 ? '#00ff88' : '#ff4444';
  const barra = '▭'.repeat(Math.floor((u.xp / u.xpSiguiente) * 20)).padEnd(20, '▭');

  res.send(`
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<title>Estado Abyssus</title>
<style>
body { font-family:'Segoe UI', sans-serif; background:#0a0a0a; color:#e0e0e0; margin:0; padding:0; }
section { padding:20px; margin:20px; background:#1c1c1c; border-radius:8px; }
</style>
</head>
<body>
<header style="padding:25px 20px; text-align:center; background:#23272a;">
<h1 style="color:#ffffff;">🔐 Estado Abyssus</h1>
<p style="font-size:14px; color:#b9bbbe;">Render institucional desde archivo sincronizado</p>
</header>

<main style="max-width:1000px; margin:0 auto;">
<section>
  <h2>👤 Usuario</h2>
  <p>ID: <strong>${u.id}</strong></p>
  <p>Nombre: <strong>${u.username}</strong></p>
</section>

<section>
  <h2>📈 Nivel</h2>
  <p>Nivel: <strong>${u.nivel}</strong></p>
  <p>XP: <strong>${u.xp} / ${u.xpSiguiente}</strong></p>
  <p>Progreso: <span style="font-family:monospace;">${barra}</span></p>
</section>

<section>
  <h2>💰 Economía</h2>
  <p>Balance: <strong>$${u.balance?.toLocaleString()}</strong></p>
  <p>Ingresos: <strong>$${u.ingresos?.toLocaleString()}</strong></p>
  <p>Gastos: <strong>$${u.gastos?.toLocaleString()}</strong></p>
  <p>Eventos: ${u.eventos?.length ? u.eventos.join(', ') : 'Ninguno'}</p>
</section>

<section>
  <h2>📜 Modlogs recientes</h2>
  ${logs.length
    ? `<ul style="list-style:none; padding:0;">${logs.map(e => `
        <li>
          <strong>${e.action}</strong> · ${e.reason}<br>
          <span style="color:#888;">${new Date(e.timestamp).toLocaleString()}</span>
        </li>`).join('')}</ul>`
    : `<p>No hay eventos registrados</p>`}
</section>

<section style="background:${fondo};">
  <h2>${icono} Última sincronización</h2>
  <p>Fecha: <strong>${actualizado.toLocaleString('es-MX', { timeZone: 'America/Mexico_City' })}</strong></p>
  <p>Estado: <strong style="color:${colorTexto};">
    ${dias <= 2 ? `Actualizado hace ${dias} día${dias !== 1 ? 's' : ''}` : `Desactualizado (${dias} días)`}
  </strong></p>
</section>
</main>

<footer style="text-align:center; padding:30px; color:#777; font-size:13px;">
Sistema Abyssus · render por archivo sincronizado
</footer>
</body>
</html>
`);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`📁 Render Abyssus activo · Puerto ${PORT}`);
});
